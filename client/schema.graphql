type FeedPost implements Node {
  content: String
  createdAt: String
  id: ID!
  imageUrl: String
  likeCount: Int
  likedByMe: Boolean
  postId: String!
  postedBy: Fren
  updatedAt: String
}

"""input type for follow and unfollow"""
input FollowInput {
  userId: String!
}

type Follower implements Node {
  amFollowing: Boolean
  createdAt: String
  email: String!
  followerCount: Int
  followingCount: Int
  frenId: String!
  id: ID!
  image: String
  isFollowingMe: Boolean
  isMe: Boolean
  name: String!
  role: String
}

type Fren implements Node {
  amFollowing: Boolean
  createdAt: String
  email: String!
  followerCount: Int
  followers(after: String, before: String, first: Int, last: Int, sort: SortInput): FrenFollowersConnection
  following(after: String, before: String, first: Int, last: Int, sort: SortInput): FrenFollowingConnection
  followingCount: Int
  frenId: String!
  id: ID!
  image: String
  isFollowingMe: Boolean
  isMe: Boolean
  name: String!
  posts(after: String, before: String, first: Int, last: Int, sort: SortInput): FrenPostsConnection
  postsCount: Int
  role: String
}

type FrenFollowersConnection {
  edges: [FrenFollowersConnectionEdge]
  pageInfo: PageInfo!
}

type FrenFollowersConnectionEdge {
  cursor: String!
  node: Follower
}

type FrenFollowingConnection {
  edges: [FrenFollowingConnectionEdge]
  pageInfo: PageInfo!
}

type FrenFollowingConnectionEdge {
  cursor: String!
  node: Follower
}

type FrenPost implements Node {
  content: String
  createdAt: String
  id: ID!
  imageUrl: String
  likeCount: Int
  likedByMe: Boolean
  postId: String!
  updatedAt: String
}

type FrenPostsConnection {
  edges: [FrenPostsConnectionEdge]
  pageInfo: PageInfo!
}

type FrenPostsConnectionEdge {
  cursor: String!
  node: FrenPost
}

type Mutation {
  createPost(content: String!, imageUrl: String): FeedPost
  deletePost(id: String!): Boolean
  toggleFollow(input: FollowInput!): Follower
  toggleFollowFren(input: FollowInput!): Fren
  toggleLiked(postId: String!): FeedPost
  updatePost(content: String, id: String!, imageUrl: String): FeedPost
}

interface Node {
  id: ID!
}

"""Order type for sorting"""
enum OrderType {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  feedPosts(after: String, before: String, first: Int, last: Int): QueryFeedPostsConnection
  fren(id: String!): Fren
  frens(after: String, before: String, first: Int, last: Int, search: String = "", sort: SortInput): QueryFrensConnection
  me: Fren
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  oneFeedpopst(id: String!): FeedPost
}

type QueryFeedPostsConnection {
  edges: [QueryFeedPostsConnectionEdge]
  pageInfo: PageInfo!
}

type QueryFeedPostsConnectionEdge {
  cursor: String!
  node: FeedPost
}

type QueryFrensConnection {
  edges: [QueryFrensConnectionEdge]
  pageInfo: PageInfo!
}

type QueryFrensConnectionEdge {
  cursor: String!
  node: Fren
}

input SortInput {
  field: String! = "id"
  order: OrderType!
}